==============================Vue自定义指令=====================

一、自定义指令产生的背景

1、除了核心功能默认内置的指令 (v-model 和 v-show)，Vue 也允许注册自定义指令，满足功能多变的需求。

2、在 Vue2.0 中，代码复用和抽象的主要形式是组件。然而，有的情况下，你仍然需要对普通 DOM 元素进行底层操作，这时候就会用到自定义指令。


二、自定义指令的分类

1、全局自定义指令，被所有的vue实例使用。

2、局部自定义指令，被当前的vue实例使用。


三、全局自定义指令的实现

            //自定义全局指令
	    Vue.directive('指令名称',{
		编写自定义指令对象中的任意钩子函数，实现指令需要实现的功能
	    })

          
            使用Vue中的directive()函数来进行实现。
			  
		1、其中第一个参数：表示的是全局指令的名称。
		（注意：前面不带v-,使用的时候需要v-来进行使用）。
			  
		2、其中第二个参数：传入的是一个对象，一个指令定义对象可以提供如下几个钩子函数
		【均为可选】
			  
	           bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。

                   inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。

                   update：所在组件的 VNode 更新时调用。
                 
                   componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。

                   unbind：只调用一次，指令与元素解绑时调用。
           
            *** 通常会使用的有bind 和  inserted 钩子函数。   ***  
            
                      指令钩子函数使用的过程中会被传入以下参数：
			 * 
			 *    1、 el：指令所绑定的元素，可以用来直接操作 DOM 。 
			 * 
			 *    2、 binding：一个对象，包含以下属性：
			 * 
			 *      重点掌握如下几个属性即可：
			 * 
			 *      value：指令的绑定值，例如：v-my-directive="1 + 1" 中，绑定值为 2。
                                expression: 字符串形式的指令表达式。例如 v-my-directive="1 + 1" 中，表达式为 "1 + 1"。
                                arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 "foo"。
			 *  
			 *      注意：除了 el 之外，其它参数都应该是只读的，切勿进行修改。
			 *         

                         总结：  1、一般针对样式等的定义，我们通常是定义在bind钩子函数中来实现的。
                      
               2、一般针对元素行为的定义，我们通常是定义在inserted钩子函数中来实现的。 
                     

四、局部自定义指令的实现
  
        //在vm实例中通过directives来进行定义
        const  vm = new  Vue({
				el:'#app',
				//自定义局部指令
				directives:{
				  'focus':{
				  	//使用的是指令定义对象的钩子函数 -- inserted | bind
				  	 inserted:function(el,binding){
				  	 	//使用el 结合  binding完成相关的操作
				  	 }
				   }
				}
		})


五、针对bind 和 update 实现的函数简写【查阅文档】

     


六、对象字面量的传参方式【查阅文档】